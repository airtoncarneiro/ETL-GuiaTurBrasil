AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  guia-tur-bra
  Função que faz a raspagem dos dados da página das cidades

Globals:
  Function:
    Environment:
      Variables:
        REGION_NAME: us-east-1
        BUCKET_NAME: etl-guia-tur-1972
        URL_BASE: https://www.guiadoturismobrasil.com

Resources:
  CidadesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CidadesFunction
      CodeUri: src/lambda/cidades
      Policies:
        - Statement:
            Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt CidadesQueue.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CidadesQueue.QueueName
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}
                - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}/*
      Layers:
        - !Ref LibsLayer
        - !Ref CustomLayer
      Environment:
        Variables:
          CIDADES_QUEUE_NAME: !GetAtt CidadesQueue.QueueName
          CIDADES_QUEUE_ARN: !GetAtt CidadesQueue.Arn
          CIDADES_QUEUE_URL: !Ref CidadesQueue
          S3BUCKET_BUCKET_NAME: !Ref S3Bucket
          S3BUCKET_BUCKET_ARN: !GetAtt S3Bucket.Arn
      Runtime: python3.10
      Handler: app.lambda_handler
      MemorySize: 128
      Timeout: 20

  CidadeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CidadeFunction
      CodeUri: src/lambda/cidade
      Policies:
        - Statement:
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref CidadeTopic
      # Events:
      #   CidadesQueue:
      #     Type: SQS
      #     Properties:
      #       Queue: !GetAtt CidadesQueue.Arn
      #       BatchSize: 1
      Environment:
        Variables:
          CIDADE_TOPIC_ARN: !Ref CidadeTopic
      Runtime: python3.10
      Handler: app.lambda_handler
      MemorySize: 128
      Timeout: 20

  # HotelLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-HotelLambda
  #     CodeUri: src/lambda/hotel
  #     Handler: app.lambda_handler
  #     Runtime: python3.10
  #     Events:
  #       HotelQueueEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt HotelQueue.Arn
  #     MemorySize: 128
  #     Timeout: 20

  # RestauranteLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-RestauranteLambda
  #     CodeUri: src/lambda/restaurante
  #     Handler: app.lambda_handler
  #     Runtime: python3.10
  #     Events:
  #       RestauranteQueueEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt RestauranteQueue.Arn
  #     MemorySize: 128
  #     Timeout: 20

  LibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-LibsLayer
      Description: Layer comum para as funções Lambda
      ContentUri: src/layer/libs
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  CustomLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-CustomLayer
      Description: Layer comum para as funções Lambda
      ContentUri: src/layer/custom
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.10

  CidadesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-CidadesQueue
      MessageRetentionPeriod: 172800
      VisibilityTimeout: 60

  CidadeTopic:
    Type: AWS::SNS::Topic
  # HotelSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     TopicArn: !Ref CidadeTopic
  #     Endpoint: !GetAtt HotelQueue.Arn
  #     Protocol: sqs
  #     RawMessageDelivery: true
  #     FilterPolicy:
  #       process-type:
  #         - hotel

  # HotelQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     MessageRetentionPeriod: 345600

  # RestauranteQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     MessageRetentionPeriod: 345600

  # RestauranteSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     TopicArn: !Ref CidadeTopic
  #     Endpoint: !GetAtt RestauranteQueue.Arn
  #     Protocol: sqs
  #     RawMessageDelivery: true
  #     FilterPolicy:
  #       process-type:
  #         - restaurante

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: etl-guia-tur-1972

Outputs:
  CidadesQueueUrl:
    Description: URL da fila CidadesQueue
    Value: !Ref CidadesQueue
    Export:
      Name: !Sub ${AWS::StackName}-CidadesQueueUrl
  CidadeTopicArn:
    Description: ARN do SNS Topic CidadeTopic
    Value: !Ref CidadeTopic
    Export:
      Name: !Sub ${AWS::StackName}-CidadeTopicArn
